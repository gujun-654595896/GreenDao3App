package com.gujun.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.gujun.greendao.DataTwoBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DATA_TWO_BEAN".
*/
public class DataTwoBeanDao extends AbstractDao<DataTwoBean, Long> {

    public static final String TABLENAME = "DATA_TWO_BEAN";

    /**
     * Properties of entity DataTwoBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id_ = new Property(0, Long.class, "id_", true, "_id");
        public final static Property Desc = new Property(1, String.class, "desc", false, "DESC");
    }


    public DataTwoBeanDao(DaoConfig config) {
        super(config);
    }
    
    public DataTwoBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DATA_TWO_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id_
                "\"DESC\" TEXT);"); // 1: desc
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DATA_TWO_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DataTwoBean entity) {
        stmt.clearBindings();
 
        Long id_ = entity.getId_();
        if (id_ != null) {
            stmt.bindLong(1, id_);
        }
 
        String desc = entity.getDesc();
        if (desc != null) {
            stmt.bindString(2, desc);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DataTwoBean entity) {
        stmt.clearBindings();
 
        Long id_ = entity.getId_();
        if (id_ != null) {
            stmt.bindLong(1, id_);
        }
 
        String desc = entity.getDesc();
        if (desc != null) {
            stmt.bindString(2, desc);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public DataTwoBean readEntity(Cursor cursor, int offset) {
        DataTwoBean entity = new DataTwoBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id_
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1) // desc
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DataTwoBean entity, int offset) {
        entity.setId_(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setDesc(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(DataTwoBean entity, long rowId) {
        entity.setId_(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(DataTwoBean entity) {
        if(entity != null) {
            return entity.getId_();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(DataTwoBean entity) {
        return entity.getId_() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
